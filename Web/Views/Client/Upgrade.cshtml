@model Tuple<HubManPractices.Service.ViewModels.ClientViewModel, IEnumerable<HubManPractices.Service.ViewModels.OfficeSubscriptionViewModel>>

@{
    ViewBag.Title = "Upgrade";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@if(TempData["Upgrade Update Error"]!=null)
{
    <div class="alert alert-danger">@TempData["Upgrade Update Error"]</div>
}

@if (TempData["Upgrade Error"] != null)
{
    <div class="alert alert-danger">@TempData["Upgrade Error"]</div>
}




<div class="contactContainer">
    <div class="banner">
        <div>Create View Module</div>
    </div>

    @using (Html.BeginForm("Upgrade", "Client", FormMethod.Post, new { @id = "contactItem" }))
    {
        @Html.AntiForgeryToken()

        @Html.ValidationSummary(true)

        @Html.Hidden("Item1.ClientID",Model.Item1.ClientID)

        <label for="Item1.ClientName">@Html.DisplayNameFor(model => model.Item1.ClientName)</label>
        @Html.EditorFor(model => model.Item1.ClientName, new { htmlAttributes = new { placeholder = "Enter Client Name", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.Item1.ClientName)


        <label for="Item1.ContactName">@Html.DisplayNameFor(model => model.Item1.ContactName)</label>
        @Html.EditorFor(model => model.Item1.ContactName, new { htmlAttributes = new { placeholder = "Enter Contact Name", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.Item1.ContactName)


        <label for="Item1.ContactTitle">@Html.DisplayNameFor(model => model.Item1.ContactTitle)</label>
        @Html.EditorFor(model => model.Item1.ContactTitle, new { htmlAttributes = new { placeholder = "Enter Contact Title", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.Item1.ContactTitle)


        <label for="Item1.ContactNumber">@Html.DisplayNameFor(model => model.Item1.ContactNumber)</label>
        @Html.EditorFor(model => model.Item1.ContactNumber, new { htmlAttributes = new { placeholder = "Enter Contact Number", @readonly = "readonly" } })
        if (TempData["NumberWrongFormat"] != null)
        {
            @Html.ValidationMessage("ContactNumber", TempData["NumberWrongFormat"])
        }

        <label for="Item1.ContactMail">@Html.DisplayNameFor(model => model.Item1.ContactMail)</label>
        @Html.EditorFor(model => model.Item1.ContactMail, new { htmlAttributes = new { placeholder = "Enter Contact Mail", @readonly = "readonly" } })
        if (TempData["EmailWrongFormat"] != null)
        {
            @Html.ValidationMessage("ContactMail", TempData["EmailWrongFormat"])
        }

        <div id="checkbox">
            <label for="f-option">Do You Have Office365 ?</label>
            <input type="radio" id="y-option" name="selector" />
            <label for="y-option">Yes</label>
            <input type="radio" id="n-option" name="selector" />
            <label for="n-option">No</label>
        </div>

        <div id="officeItemY">
            @foreach (var Sub in Model.Item2)
            {
                <label for=@Sub.SubscriptionName.Replace(" ","_").ToString()>@Sub.SubscriptionName</label>
                @Html.Hidden(Sub.MonthlyFee.ToString(), Sub.SubscriptionID)
                @Html.TextBox(Sub.SubscriptionName, null, new { @type = "number", @placeholder = "Enter Number of " + Sub.SubscriptionName + " you have.." })
            }
        </div>
        <div id="officeItemN">
            <label for="OfficeRequest">Requested Number</label>
            <input type="number" name="OfficeRequest" placeholder="Enter Number Of Office 365 you want" />
        </div>

        <input type="submit" value="Upgrade" />
    }

</div>

@section scripts
{
    <script type="text/javascript" src="@Url.Content("/Scripts/script.js")"></script>
}