@model Tuple<HubManPractices.Service.ViewModels.ClientViewModel, IEnumerable<HubManPractices.Service.ViewModels.OfficeSubscriptionViewModel>> 

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@{
    List<SelectListItem> select = new List<SelectListItem>();
    foreach (var item in Model.Item2)
    {
        select.Add(new SelectListItem
        {
            Text = item.SubscriptionName,
            Value = item.SubscriptionID.ToString()
        });
    }
}


@if (TempData["Exists"]!=null)
{
    <div class="alert alert-danger" >@TempData["Exists"]</div>
}
@if (TempData["ErrorCreate"] != null)
{
    <div class="alert alert-danger">@TempData["ErrorCreate"]</div>
}

@if (TempData["ReAddError"] != null)
{
    <div class="alert alert-danger">@TempData["ReAddError"]</div>
}



@if (TempData["ReActivateError"] != null)
{
    <div class="alert alert-danger">@TempData["ReActivateError"]</div>
}
<h2>Create</h2>


@using (Html.BeginForm("SendEmail","Account",FormMethod.Post)) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>ClientViewModel</h4>
        <hr />
        @Html.ValidationSummary(true)

        <div class="form-group">
            @Html.Hidden("ResellerID",TempData["ResellerID"])
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Item1.ClientName, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Item1.ClientName)
                @Html.ValidationMessageFor(model => model.Item1.ClientName)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Item1.ContactName, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Item1.ContactName)
                @Html.ValidationMessageFor(model => model.Item1.ContactName)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Item1.ContactTitle, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Item1.ContactTitle)
                @Html.ValidationMessageFor(model => model.Item1.ContactTitle)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Item1.ContactNumber, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Item1.ContactNumber)
            </div>
            @if (TempData["NumberWrongFormat"] != null)
            {
                <p>@TempData["NumberWrongFormat"]</p>
            }
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Item1.ContactMail, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Item1.ContactMail)
            </div>
            @if (TempData["EmailWrongFormat"] != null)
            {
                <p>@TempData["EmailWrongFormat"]</p>
            }
        </div>


        @foreach(var Sub in Model.Item2)
        {
         <div class="form-group">
            <div class="col-md-10">
                @Html.DropDownList(Sub.MonthlyFee.ToString(), select)
                @Html.TextBox(Sub.SubscriptionName, null, new { @type = "number" })
            </div>
        </div>   
        }

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>

    </div>
}

<div>
    @Html.ActionLink("Show Clients List", "Index", new {ResellerID =TempData["ResellerID"]})
</div>
